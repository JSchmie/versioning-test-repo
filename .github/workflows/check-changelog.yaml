name: Check Changelog

on:
  workflow_call:
    inputs:
      pr_title:
        required: true
        type: string
      update_changelog:
        required: false
        type: boolean
        default: false

jobs:
  check-changelog:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.determine-new-version.outputs.version }}
      release_notes: ${{ steps.extract-notes.outputs.release_notes }}
      updated_changelog: ${{ steps.update-changelog.outputs.updated_changelog }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          # Get the latest tag, or initialize to v0.0.0 if no tags are found
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine New Version from CHANGELOG
        id: determine-new-version
        continue-on-error: true
        run: |
          latest_tag=${{ env.latest_tag }}

          # Extract the latest version from CHANGELOG.md
          changelog_version=$(grep -oP '^## \[\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1)

          if [ -z "$changelog_version" ]; then
            echo "No version found in CHANGELOG.md. Bumping patch version of the latest tag."

            # Split the latest tag into parts
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            changelog_version="v$major.$minor.$patch-pre"
          fi

          # Convert versions to comparable formats by removing "v" and padding numbers
          pad_version() {
            printf "%03d%03d%03d" $(echo "$1" | tr '.' ' ')
          }

          padded_changelog_version=$(pad_version "$changelog_version")
          padded_latest_tag=$(pad_version "${latest_tag#v}")

          # Ensure changelog_version is greater than latest_tag
          if [ "$padded_changelog_version" -le "$padded_latest_tag" ]; then
            # Split the latest tag into parts again for suggestion
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            next_patch_version="v$major.$minor.$((patch + 1))"
            next_minor_version="v$major.$((minor + 1)).0"
            echo "The New Version determined from CHANGELOG.md ($changelog_version) is not greater than the latest tag ($latest_tag). The latest version should be $next_patch_version or $next_minor_version. Please create a new release in your CHANGELOG.md."
            exit 1
          fi

          clean_version="${changelog_version#v}"
          echo "version=$clean_version" >> $GITHUB_ENV
          echo "::set-output name=version::$clean_version"
          echo "Version determined from CHANGELOG.md or bumped: $clean_version"

      - name: Extract Release Notes
        id: extract-notes
        run: |
          version="${{ steps.determine-new-version.outputs.version }}"
          clean_version="${version#v}"
          release_notes=$(awk -v version="$clean_version" '
            BEGIN { flag=0 }
            # Start flagging when the version section is found
            /^## \[.*\]/ {
              if (flag) exit  # Exit when the next section starts
            }
            /^## \['"$clean_version"'\]/ { flag=1; next }  # Start printing after the header
            flag { print }  # Print lines while flag is 1
          ' CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$release_notes"

      - name: Update CHANGELOG.md
        if: ${{ inputs.update_changelog }}
        id: update-changelog
        run: |
          version="${{ steps.determine-new-version.outputs.version }}"
          clean_version="${version#v}"
          pr_title="${{ inputs.pr_title }}"

          if ! grep -q "^## \[$clean_version.pre\]" CHANGELOG.md; then
            echo "## [$clean_version.pre] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          fi

          sed -i "/^## \[$clean_version.pre\]/a - $pr_title" CHANGELOG.md

          updated_changelog=$(cat CHANGELOG.md)
          echo "UPDATED_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$updated_changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=updated_changelog::$updated_changelog"
