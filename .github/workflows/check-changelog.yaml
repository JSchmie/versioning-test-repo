name: Check Changelog

on:
  workflow_call:
    inputs:
      pr_title:
        required: true
        type: string
      update_changelog:
        required: false
        type: boolean
        default: false

jobs:
  check-changelog:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.determine-new-version.outputs.next_version }}
      release_notes: ${{ steps.extract-notes.outputs.release_notes }}
      updated_changelog: ${{ steps.update-changelog.outputs.updated_changelog }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          # Get the latest tag, or initialize to v0.0.0 if no tags are found
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine New Version from CHANGELOG
        id: determine-new-version
        run: |
          latest_tag=${{ env.latest_tag }}
          pr_title="${{ inputs.pr_title }}"

          # Extract version from PR title if present
          version_regex="v([0-9]+)\.([0-9]+)\.([0-9]+)"
          if [[ $pr_title =~ $version_regex ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_version="v$major.$minor.$patch"
            echo "Found semantic version in PR title: $new_version"
          else
            # Extract the latest version from CHANGELOG.md
            changelog_version=$(grep -oP '^## \[\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1)

            if [ -z "$changelog_version" ]; then
              echo "No version found in CHANGELOG.md. Bumping patch version of the latest tag."

              # Split the latest tag into parts
              IFS='.' read -r -a parts <<< "${latest_tag#v}"
              major=${parts[0]}
              minor=${parts[1]}
              patch=${parts[2]}
              patch=$((patch + 1))
              changelog_version="v$major.$minor.$patch"
            fi

            # Convert versions to comparable formats by removing "v" and padding numbers
            pad_version() {
              printf "%03d%03d%03d" $(echo "$1" | tr '.' ' ')
            }

            padded_changelog_version=$(pad_version "$changelog_version")
            padded_latest_tag=$(pad_version "${latest_tag#v}")

            # Ensure changelog_version is greater than latest_tag
            if [ "$padded_changelog_version" -le "$padded_latest_tag" ]; then
              # Split the latest tag into parts again for suggestion
              IFS='.' read -r -a parts <<< "${latest_tag#v}"
              major=${parts[0]}
              minor=${parts[1]}
              patch=${parts[2]}
              next_patch_version="v$major.$minor.$((patch + 1))"
              next_minor_version="v$major.$((minor + 1)).0"
              new_version="$next_patch_version"
              echo "The New Version determined from CHANGELOG.md ($changelog_version) is not greater than the latest tag ($latest_tag). The latest version should be $next_patch_version or $next_minor_version."
            else
              new_version="$changelog_version"
            fi
          fi

          clean_version="${new_version#v}"
          echo "next_version=$clean_version" >> $GITHUB_ENV
          echo "::set-output name=next_version::$clean_version"
          echo "Version determined: $clean_version"

      - name: Extract Release Notes
        id: extract-notes
        run: |
          version="${{ steps.determine-new-version.outputs.next_version }}"
          clean_version="${version#v}"
          release_notes=$(awk -v version="$clean_version" '
            BEGIN { flag=0 }
            # Start flagging when the version section is found
            /^## \[.*\]/ {
              if (flag) exit  # Exit when the next section starts
            }
            /^## \['"$clean_version"'\]/ { flag=1; next }  # Start printing after the header
            flag { print }  # Print lines while flag is 1
          ' CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$release_notes"

      - name: Update CHANGELOG.md
        if: ${{ inputs.update_changelog }}
        id: update-changelog
        run: |
          next_version="${{ steps.determine-new-version.outputs.next_version }}"
          clean_version="${next_version#v}"
          pr_title="${{ inputs.pr_title }}"

          echo "Next Version: ${next_version}"
          echo "Clean Version: ${clean_version}"

          # Ensure clean_version is not empty
          if [ -z "$clean_version" ]; then
            echo "Error: clean_version is empty"
            exit 1
          fi

          # Add a new version header with the .pre suffix if it doesn't exist
          if ! grep -q "^## \[$clean_version.pre\]" CHANGELOG.md; then
            sed -i "/^# Changelog/a\\ ## [$clean_version.pre] - $(date +%Y-%m-%d)\n\\- $pr_title" CHANGELOG.md
          else
            sed -i "/^## \[$clean_version.pre\]/a\\- $pr_title" CHANGELOG.md
          fi

          updated_changelog=$(cat CHANGELOG.md)
          echo "UPDATED_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$updated_changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=updated_changelog::$updated_changelog"

      - name: Echo Updated CHANGELOG.md
        if: ${{ inputs.update_changelog }}
        run: |
          echo "Updated CHANGELOG.md:"
          echo "${{ steps.update-changelog.outputs.updated_changelog }}"

      - name: Upload CHANGELOG.md as Artifact
        if: ${{ inputs.update_changelog }}
        uses: actions/upload-artifact@v3
        with:
          name: updated-changelog
          path: CHANGELOG.md
