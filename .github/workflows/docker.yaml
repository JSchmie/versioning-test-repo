# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Publish Docker image

on:

  push:
    tags:
      - v*

  workflow_dispatch:

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-tags: true
    
      - name: Extract tag from ref
        id: extract_tag
        run: echo "CURRENT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
  
      - name: Display the current tag
        run: echo "The current tag is ${{ env.CURRENT_TAG }}"
        
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      #   # only if pull request
      # - name: Get Latest Tag
      #   id: get-latest-tag
      #   run: |
      #     # Get the latest tag, or initialize to v0.0.0 if no tags are found
      #     latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
      #     echo "::set-output name=latest_tag::$latest_tag"

      # - name: Determine Next Patch Version
      #   id: determine-next-version
      #   run: |
      #     latest_tag="${{ steps.get-latest-tag.outputs.latest_tag }}"

      #     # Split the latest tag into parts
      #     IFS='.' read -r -a parts <<< "${latest_tag#v}"
      #     major=${parts[0]}
      #     minor=${parts[1]}
      #     patch=${parts[2]}
      #     patch=$((patch + 1))
      #     next_version="v$major.$minor.$patch"

      #     echo "::set-output name=next_version::$next_version"
      #     echo "Next version determined: $next_version"

      - name: Get Version Tag
        run: |
          version=$(git describe --tags --abbrev=0)
          echo "Version tag: $version"
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: my-docker-hub-namespace/my-docker-hub-repository

      - name: print labels
        run: |
          echo "Doocker tags ${{ steps.meta.outputs.tags }}"
          echo "Doocker labels ${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: false
      

# name: Test Docker Workflow

# on:
#     pull_request_target:
#         branches:
#             - main
#         types:
#             - closed
    
#     push:
#         tags:
#             - 'v*.*.*'
            
#     workflow_dispatch:

# jobs:
#     Build-and-publish-to-Dockerhub:
#         if: |
#             (github.event_name == 'workflow_dispatch') ||
#             (github.event_name == 'pull_request_target' &&
#             github.event.pull_request.merged &&
#             contains(github.event.pull_request.labels.*.name, 'docker')) ||
#             (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
#         runs-on: ubuntu-latest
#         steps:
#             - name: Checkout Repository
#               uses: actions/checkout@v4
#               with:
#                 fetch-depth: '0'
#             - name: Get latest release tag
#               id: get_tag
#               run: |
#                 LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
#                 if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
#                 echo "RELEASE_TAG=${LATEST_TAG}-develop" >> $GITHUB_ENV
#                 else
#                 echo "RELEASE_TAG=${LATEST_TAG}" >> $GITHUB_ENV
#                 fi