name: Auto Label PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs: 
      all-labels: ${{ steps.label-the-PR.outputs.all-labels }}
    steps:
      - name: Apply Labels
        id: label-the-PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true
  
  check-changelog:
    needs: label
    if: |
      contains(needs.label.outputs.all-labels, 'release') ||
      contains(needs.label.outputs.all-labels, 'docker')
    uses: ./.github/workflows/check-changelog.yaml
    with:
      update_changelog: true
      include_pre_tag : true
  
  get-check-changelog-outputs:
    needs: check-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Print Current Version
        run: |
          echo "Current Version: ${{ needs.check-changelog.outputs.current_version }}"
      
      - name: Print Next Version
        run: |
          echo "Next Version: ${{ needs.check-changelog.outputs.next_version }}"
      
      - name: Print Release Notes
        run: |
          echo "Release Notes: ${{ needs.check-changelog.outputs.release_notes }}"
      
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Release Notes
        run: |
          version="${{ needs.check-changelog.outputs.next_version }}"
          clean_version="${version#v}"
          echo "Extracting release notes for version: $clean_version"


          release_notes=$(awk -v version="$clean_version" '
            BEGIN { flag=0 }
            # Start flagging when the version section is found
            $0 ~ "^## \\[" version "\\]" || $0 ~ "^## \\[" version "\\.pre\\]" { flag=1; next }  # Start printing after the header
            # Stop flagging when the next version section is found
            $0 ~ "^## \\[.*\\]" { if (flag) exit }
            flag { print }  # Print lines while flag is 1
          ' CHANGELOG.md)

          echo "Extracted release notes:"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$release_notes"

      - name: print from Env
        run: |
          echo "Release Notes from ENV: ${{ env.RELEASE_NOTES }}"
    
  get-check-changelog-outputs-2:
    needs: check-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Print Current Version
        run: |
          echo "Current Version: ${{ needs.check-changelog.outputs.current_version }}"
      
      - name: Print Next Version
        run: |
          echo "Next Version: ${{ needs.check-changelog.outputs.next_version }}"
      
      - name: Print Release Notes
        run: |
          echo "Release Notes: ${{ needs.check-changelog.outputs.release_notes }}"

      - name: print from Env
        run: |
          echo "Release Notes from ENV: ${{ env.RELEASE_NOTES }}"