name: Auto Label PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs: 
      all-labels: ${{ steps.label-the-PR.outputs.all-labels }}
    steps:
      - name: Apply Labels
        id: label-the-PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true
  
  check-changelog-based-on-labels:
    needs: label
    if: contains(needs.label.outputs.all-labels, 'release')
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: Check Version in Changelog for release
        id: check-version-in-changelog
        run: |
          # Fetch the latest tags from the remote
          git fetch --tags

          # Get the latest tag, or initialize to v0.0.0 if no tags are found
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

          # Extract version from PR title or body
          pr_body="${{ github.event.pull_request.body }}"
          pr_title="${{ github.event.pull_request.title }}"

          echo "pr_body= $pr_body"
          echo "pr_title= $pr_title"

          version_regex="v([0-9]+)\.([0-9]+)\.([0-9]+)"

          if [[ $pr_body =~ $version_regex ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_tag="v$major.$minor.$patch"
          elif [[ $pr_title =~ $version_regex ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_tag="v$major.$minor.$patch"
          else
            # Split the latest tag into parts
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi

          clean_version="${new_tag#v}"
          echo "version=$clean_version" >> $GITHUB_ENV
          echo "Version determined: $clean_version"

      - name: Check if Version Already Exists in Tags
        if: steps.check-version-in-changelog.conclusion != 'skipped'
        run: |
          version="${{ env.version }}"
          if git tag --list | grep -q "^$version$"; then
            echo "Version $version already exists in tags."
            exit 1
          else
            echo "Version $version does not exist in tags."
          fi

      - name: Check Version in CHANGELOG
        id: check_version
        if: steps.check-version-in-changelog.conclusion != 'skipped'
        run: |
          version="${{ env.version }}"
          if ! grep -q "^## \[$version\]" CHANGELOG.md; then
            echo "Version $version not found in CHANGELOG.md."
            exit 1
          else
            echo "Version $version found in CHANGELOG.md."
          fi
  
  check-changelog:
    needs: label
    if: contains(needs.label.outputs.all-labels, 'release')
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Fetch Tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          # Get the latest tag, or initialize to v0.0.0 if no tags are found
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine New Version from CHANGELOG
        id: determine-new-version
        run: |
          latest_tag=${{ env.latest_tag }}

          # Extract the latest version from CHANGELOG.md
          changelog_version=$(grep -oP '^## \[\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1)

          if [ -z "$changelog_version" ]; then
            echo "No version found in CHANGELOG.md. Bumping patch version of the latest tag."

            # Split the latest tag into parts
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            changelog_version="v$major.$minor.$patch"
          fi

          # Convert versions to comparable formats by removing "v" and padding numbers
          pad_version() {
            printf "%03d%03d%03d" $(echo "$1" | tr '.' ' ')
          }

          padded_changelog_version=$(pad_version "$changelog_version")
          padded_latest_tag=$(pad_version "${latest_tag#v}")

          # Ensure changelog_version is greater than latest_tag
          if [ "$padded_changelog_version" -le "$padded_latest_tag" ]; then
            next_patch_version="${latest_tag%.*}.$((patch + 1))"
            next_minor_version="${latest_tag%%.*}.$((minor + 1)).0"
            echo "The New Version determined from CHANGELOG.md ($changelog_version) is not greater than the latest tag ($latest_tag). The latest version should be $next_patch_version or $next_minor_version. Please create a new release in your CHANGELOG.md."
            exit 1
          fi

          clean_version="${changelog_version#v}"
          echo "version=$clean_version" >> $GITHUB_ENV
          echo "Version determined from CHANGELOG.md or bumped: $clean_version"

      - name: Check if Version Already Exists in Tags
        if: steps.determine-new-version.conclusion != 'skipped'
        run: |
          version="${{ env.version }}"
          if git tag --list | grep -q "^$version$"; then
            echo "Version $version already exists in tags."
            exit 1
          else
            echo "Version $version does not exist in tags."
          fi

      - name: Validate Version in CHANGELOG
        id: validate-version-in-changelog
        if: steps.determine-new-version.conclusion != 'skipped'
        run: |
          version="${{ env.version }}"
          if ! grep -q "^## \[$version\]" CHANGELOG.md; then
            echo "Version $version not found in CHANGELOG.md."
            exit 1
          else
            echo "Version $version found in CHANGELOG.md."
          fi